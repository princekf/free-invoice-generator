name: Build and Deploy to Development

on:
  pull_request:
    types: [closed]
    branches: [master]
  workflow_dispatch:

jobs:
  build-and-deploy:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Node 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # - name: Set Git User
      #   run: |
      #     git config --global user.email "princekfrancis@gmail.com"
      #     git config --global user.name "Prince Francis"

      # - name: Install dependencies with Yarn
      #   run: yarn install --frozen-lockfile

      # - name: Build Angular App (production)
      #   run: yarn build --configuration production
            
      - name: Update Version
        id: version_bump
        run: |
          # Extract and export branch name
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          # Bump patch version in Yarn 4+
          yarn version patch --deferred
          yarn version apply

          VERSION=$(node -p "require('./package.json').version")
          VERSION_FULL="${VERSION}-${BRANCH_NAME}"

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION_FULL=$VERSION_FULL" >> $GITHUB_ENV
      - name: Commit and Push Changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
        run: |
          git config --global user.email "prince.francis@tociva.com"
          git config --global user.name "Tociva Technologies"

          CURRENT_DATE=$(date +"%Y-%m-%d")
          {
            echo "# Version Details"
            echo "## Version: $VERSION"
            echo "## Date: $CURRENT_DATE"
            echo "BRANCH_NAME=$BRANCH_NAME"
            echo "BUILD_VERSION=$VERSION_FULL"
            echo ""
            cat versions.md
          } > versions.tmp && mv versions.tmp versions.md

          git add versions.md package.json
          git commit -m "CI: Bump version to $VERSION [skip ci]"

          # 🔍 Test PAT authentication with GitHub API
          curl -H "Authorization: token ${GH_PAT}" https://api.github.com/user

          if [ $? -ne 0 ]; then
            echo "❌ GitHub PAT authentication failed"
            exit 1
          else
            echo "✅ GitHub PAT authentication successful"
          fi

          # ✅ Use PAT-authenticated URL for push
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}
          # git push origin HEAD:$BRANCH_NAME
          # Use token-authenticated remote for push (bypass github-actions[bot])
          git config --global credential.helper ""
          GIT_TRACE=1 GIT_CURL_VERBOSE=1 git push https://${GH_USERNAME}:${GH_PAT}@github.com/${{ github.repository }} HEAD:$BRANCH_NAME



      - name: Add deployment info to info.txt
        run: |
          mkdir -p dist/free-invoice-generator/browser
          
          # Write info.txt
          echo "branch : $BRANCH_NAME" > dist/free-invoice-generator/browser/info.txt
          echo "version : $VERSION" >> dist/free-invoice-generator/browser/info.txt
          echo "version_full : $VERSION_FULL" >> dist/free-invoice-generator/browser/info.txt
          echo "time : $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> dist/free-invoice-generator/browser/info.txt

      - name: Deploy to Cloudflare Pages with Wrangler
        run: |
          yarn dlx wrangler pages deploy dist/free-invoice-generator/browser \
            --project-name ${{ secrets.CF_PROJECT_NAME }} \
            --branch main
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID:        ${{ secrets.CF_ACCOUNT_ID }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**
            
      - name: Get User, Release Date and Time
        run: |
          echo "RELEASE_DATETIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "RELEASE_USER=${{ github.actor }}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: '${BRANCH_NAME}-${VERSION}'
          name: 'Development Release ${BRANCH_NAME}-${VERSION}'
          body: |
            ## Release Details
            - **Title:** `Development Release ${BRANCH_NAME}-${VERSION}`
            - **Environment:** `Development`
            - **Branch:** `${BRANCH_NAME}`
            - **Version:** `${VERSION}`
            - **Version Full Name:** `${VERSION_FULL}`
            - **Release Date:** `${{ env.RELEASE_DATETIME }}`
            - **Released By:** `${{ env.RELEASE_USER }}`
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


